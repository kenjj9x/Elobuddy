using System;
using System.Drawing;
using System.Linq;
using EloBuddy;
using EloBuddy.SDK;
using EloBuddy.SDK.Constants;
using EloBuddy.SDK.Enumerations;
using EloBuddy.SDK.Events;
using EloBuddy.SDK.Menu;
using EloBuddy.SDK.Menu.Values;
namespace Velkoz_exploit_by_Kenjj
{
    class Program
    {
        // Menus
        public static Menu VelKozMenu, ComboMenu;

        // Skills
        public static Spell.Skillshot Q;
        public static Spell.Skillshot W;
        public static Spell.Skillshot E;
        public static Spell.Skillshot R;
        public static int tickIndex = 0,index=0,index1=0;

        // Enum for Spells
        public enum AttackSpell
        {
            Q,
            W,
            E,
            R,
        }

        public static Obj_AI_Base GetEnemy(float range, GameObjectType gametype)
        {
            return ObjectManager.Get<Obj_AI_Base>().OrderByDescending(a => a.Health)
                    .Where(a => a.IsEnemy
                    && a.Type == gametype && !VelKoz.IsRecalling()
                    && !a.IsDead && a.IsValidTarget(range) && !a.IsInvulnerable
                    && !a.HasBuff("BlackShield") && !a.HasBuff("SivirE") && !a.HasBuff("FioraW")
                    && !a.HasBuff("ChronoShift")
                    && a.Distance(VelKoz) <= range).FirstOrDefault();
        }


         public static bool LagFree(int offset)
        {
            if (tickIndex == offset)
                return true;
            else
                return false;
        }

        public static AIHeroClient VelKoz { get { return Player.Instance; } }
       

        static void Main(string[] args)
        {
            Loading.OnLoadingComplete += Loading_OnLoadingComplete;
        }

        static void Loading_OnLoadingComplete(EventArgs args)
        {
            
            if (VelKoz.ChampionName != "Velkoz") return;
          
            
            Q = new Spell.Skillshot(SpellSlot.Q, 1050, SkillShotType.Linear)
            {
                MinimumHitChance = HitChance.High,
                AllowedCollisionCount = 0
            };
            W = new Spell.Skillshot(SpellSlot.W, 1050, SkillShotType.Linear)
            {
                MinimumHitChance = HitChance.High,
                AllowedCollisionCount = int.MaxValue
            };
            
            E = new Spell.Skillshot(SpellSlot.E, 850, SkillShotType.Circular)
            {
                MinimumHitChance = HitChance.High,
                AllowedCollisionCount = int.MaxValue
            };
            R = new Spell.Skillshot(SpellSlot.R, 1550, SkillShotType.Linear);
           
            VelKozMenu = MainMenu.AddMenu("Vel'Koz", "VelKoz");
            VelKozMenu.AddGroupLabel("Vel'Koz");

            ComboMenu = VelKozMenu.AddSubMenu("Combo", "Combo");
            ComboMenu.AddGroupLabel("Combo");
            ComboMenu.AddLabel("Combo Modes:");
            ComboMenu.Add("ComboM", new CheckBox("ComboMode"));
            ComboMenu.AddSeparator(1);
            ComboMenu.AddLabel("Spells:");
            ComboMenu.Add("Qcombo", new CheckBox("Use Q"));
            ComboMenu.Add("Wcombo", new CheckBox("Use W"));
            ComboMenu.Add("Ecombo", new CheckBox("Use E"));

            Game.OnUpdate += OnUpdate;
            Game.OnUpdate += Game_OnUpdate;
            Spellbook.OnUpdateChargeableSpell += Spellbook_OnUpdateChargedSpell;          
            Orbwalker.OnAttack += Orbwalker_OnAttack;

        }
       
        private static void Orbwalker_OnAttack(AttackableUnit target, EventArgs args)
        {
            if (Orbwalker.ActiveModesFlags == Orbwalker.ActiveModes.Combo && R.IsReady())
            {
                //Chat.Print("Cast R exploit delay 20");
                Core.DelayAction(() => R.Cast(target.Position), 20);
            }
        }
       
        private static void Spellbook_OnUpdateChargedSpell(Spellbook sender,SpellbookUpdateChargeableSpellEventArgs args)
        {
            if (sender.Owner.IsMe)
            {
                args.Process = true;
            }
        }
       

        static void OnUpdate(EventArgs args)
        {
            tickIndex++;

            if (tickIndex > 4)
                tickIndex = 0;

            if (!LagFree(0))
                return;
        }
        
        static void Game_OnUpdate(EventArgs args)
        {
           

            if (VelKoz.IsDead) return;


            if (Orbwalker.ActiveModesFlags.HasFlag(Orbwalker.ActiveModes.Combo))
                ComboMode();
            
            if (HasRBuff())
            {
                
                VelKoz.Spellbook.UpdateChargeableSpell(SpellSlot.R, Game.CursorPos, false, false);

                if (Program.LagFree(4))
                {
                  
                    R.Cast(Game.CursorPos);
                }
                Orbwalker.DisableMovement = true;
                Orbwalker.DisableAttacking = true;
                
            }
            else
            {
                Orbwalker.DisableMovement = false;
                Orbwalker.DisableAttacking = false;
            }
            
        }

        private static bool HasRBuff()
        {
            return (VelKoz.HasBuff("VelkozR") && Player.Instance.Spellbook.IsChanneling);
        }

        public static void ComboMode()
        {
            if (ComboMenu["Qcombo"].Cast<CheckBox>().CurrentValue && Q.IsReady()
                && Q.Name == "VelkozQ")
            {
                Obj_AI_Base target = GetEnemy(Q.Range, GameObjectType.AIHeroClient);
                if (target != null)
                    Q.Cast(Q.GetPrediction(target).CastPosition);
            }
            if (ComboMenu["Ecombo"].Cast<CheckBox>().CurrentValue && E.IsReady())
            {
                Obj_AI_Base target = GetEnemy(E.Range, GameObjectType.AIHeroClient);
                if (target != null)
                    E.Cast(E.GetPrediction(target).CastPosition);
            }
            if (ComboMenu["Wcombo"].Cast<CheckBox>().CurrentValue && W.IsReady())
            {
                Obj_AI_Base target = GetEnemy(W.Range, GameObjectType.AIHeroClient);
                if (target != null)
                    W.Cast(W.GetPrediction(target).CastPosition);
            }
          
        }
        
    }
}